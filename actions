package gr.hua.it219151.actions;

import gr.hua.it219151.it219151;
import gr.hua.it219151.contracts.Contract;
import gr.hua.it219151.users.User;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Scanner;

public class CreateContract {

    //the list of all contracts
    public static List<Contract> savedContracts = new ArrayList<>();

    public void insertContract(User loggedUser){ // function that gathers contract's information and returns a new Contract object
        System.out.println("Welcome to Insert Contract Page!");

        savedContracts = it219151.allContracts; // get the allUsers static List of the Main class

        Scanner scanner = new Scanner(System.in); //reads user's input
        String userTypeInput = "";

        String ID = "id" + LocalDateTime.now().toString();

        System.out.println("Pick Contract Type, 'a' for Landline and 'b' for Mobile:");
        userTypeInput = scanner.nextLine();
        while (!userTypeInput.equals("a") && !userTypeInput.equals("b")){ // check for valid user input
            System.out.println("This is not a valid option, pick again!");
            userTypeInput = scanner.nextLine();
        }
        String contractType;
        if(userTypeInput.equals("a")){
            contractType = "LANDLINE";
        }
        else {
            contractType = "MOBILE";
        }

        String regExPhone = "^[0-9]{10}$"; // this is a Regular Expression for an Phone only numbers 10 digit String
        String phonenumber = "";
        while (true){ // check for valid phone number for given contract type
            System.out.println("Give phone Number:");
            phonenumber = scanner.nextLine();
            boolean unique = true;
            if(phonenumber.matches(regExPhone)) { // if Phone number matches Regular expression
                for(Contract c: savedContracts){ // for every User in system
                    if(c.getPhoneNumber().equals(phonenumber)){ // check for unique new Phone
                        unique = false;
                        System.out.println("This Phone number already exists in our system! Try Again!");
                    }
                }
                if (unique) { // if it is unique we also must check if it is mobile or landline phone number
                    if (contractType == "LANDLINE" && phonenumber.charAt(0) == '2') {
                        break;
                    } else if (contractType == "MOBILE" && phonenumber.charAt(0) == '6') {
                        break;
                    }
                    System.out.println("Phone number type doesn't match contract Type! Give again:");
                }
            }
            else{
                System.out.println("This is invalid phone number, please give 10 digit number!");
            }

        }

        //get User's AFM and password through User getters
        String afm = loggedUser.getAFM();

        String password = loggedUser.getPassword();

        int freeminutes = 0;
        String userChoice = "";

        System.out.println("You can choose between three free minute packages, " +
                "Pick 'a' for 1000 free minutes " +
                "'b' for 2500 minutes" +
                "or 'c' for 5000 minutes!");

        userChoice = scanner.nextLine(); //read user input

        while (!userChoice.equals("a") && !userChoice.equals("b")  && !userChoice.equals("c") ){ // check for valid user input
            System.out.println("This is not a valid option, pick again!");
            userChoice = scanner.nextLine();
        }

        if(userChoice.equals("a")){ //check which action was selected
            freeminutes = 1000;
        }
        else if(userChoice.equals("b")){
            freeminutes = 2500;
        }
        else{
            freeminutes = 5000;
        }

        //a european date format
        SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
        String inputDate = "";
        Date startDate = new Date();
        while(true){
            System.out.println("Give Date for contract activation in format dd-MM-yyyy (must be today or later):");
            inputDate = scanner.nextLine();

            boolean valid = true;
            try { // we check for valid date format
                formatter.parse(inputDate);
                startDate = formatter.parse(inputDate);
            } catch (ParseException pe) {
                valid = false;
            }

            if(valid) {
                Date now = new Date(); // we get the date time of now
                if (now.after(startDate)) { // we check if given date is lated than now
                    System.out.println("You can't give a past Date for a new Contract! Try again!");
                }
                else{
                    break;
                }
            }
        }

        System.out.println("Pick Contract Duration, 'a' for One Year and 'b' for Two Years:");
        userTypeInput = scanner.nextLine();
        while (!userTypeInput.equals("a") && !userTypeInput.equals("b")){ // check for valid user input
            System.out.println("This is not a valid option, pick again!");
            userTypeInput = scanner.nextLine();
        }
        String contractDuration;
        if(userTypeInput.equals("a")){
            contractDuration = "ONEYEAR";
        }
        else {
            contractDuration = "TWOYEARS";
        }

        System.out.println("We will now Calculate contract's Monthly Cost according to Contract Type and User Type.");
        int monthlyCost = 0;
        if(contractType.equals("LANDLINE")){
            if(loggedUser.getUserType().equals("NORMAL")){
                monthlyCost = 15;
            }
            else if(loggedUser.getUserType().equals("STUDENT")){
                monthlyCost = 5;
            }
            else{
                monthlyCost = 10;
            }
        }
        else{
            if(loggedUser.getUserType().equals("NORMAL")){
                monthlyCost = 12;
            }
            else if(loggedUser.getUserType().equals("STUDENT")){
                monthlyCost = 5;
            }
            else{
                monthlyCost = 8;
            }
        }
        System.out.println("This contract's monthly cost is: " + monthlyCost);

        boolean isEContract = true;
        System.out.println("Choose if you want Contract to be E-Contract, 'a' for E-Contract and 'b' for Physical Contract:");
        userTypeInput = scanner.nextLine();
        while (!userTypeInput.equals("a") && !userTypeInput.equals("b")){ // check for valid user input
            System.out.println("This is not a valid option, pick again!");
            userTypeInput = scanner.nextLine();
        }
        if(userTypeInput.equals("b")){
            isEContract = false;
        }

        System.out.println("Pick Payment Method, 'a' for Credit, 'b' for Cash and 'c' for Debit:");
        userTypeInput = scanner.nextLine();
        while (!userTypeInput.equals("a") && !userTypeInput.equals("b") && !userTypeInput.equals("c")){ // check for valid user input
            System.out.println("This is not a valid option, pick again!");
            userTypeInput = scanner.nextLine();
        }
        String paymentMethod;
        if(userTypeInput.equals("a")){
            paymentMethod = "CREDIT";
        }
        else if(userTypeInput.equals("b")){
            paymentMethod = "CASH";
        }
        else {
            paymentMethod = "DEBIT";
        }

        String networkSpeed;
        if(contractType == "LANDLINE"){
            System.out.println("Pick Network Speed, 'a' for ADSL, 'b' for VDSL or if you don't want internet pick 'c':");
            userTypeInput = scanner.nextLine();
            while (!userTypeInput.equals("a") && !userTypeInput.equals("b") && !userTypeInput.equals("c")){ // check for valid user input
                System.out.println("This is not a valid option, pick again!");
                userTypeInput = scanner.nextLine();
            }

            if(userTypeInput.equals("a")){
                networkSpeed = "ADSL";
            }
            else if(userTypeInput.equals("b")){
                networkSpeed = "VDSL";
            }
            else {
                networkSpeed = "NOINTERNET";
            }
        }
        else{
            networkSpeed = "DATA";
        }

        int freeMonthlyGB;
        int freeMonthlySMS;
        if(contractType == "MOBILE"){
            System.out.println("You can choose between three free monthly GB & SMS combo packages, " +
                    "Pick 'a' for 1GB Data & 1000 SMS " +
                    "'b' for 2GB Data & 500 SMS " +
                    "or 'c' for 500MB Data & 2000 SMS!");

            userChoice = scanner.nextLine(); //read user input

            while (!userChoice.equals("a") && !userChoice.equals("b")  && !userChoice.equals("c") ){ // check for valid user input
                System.out.println("This is not a valid option, pick again!");
                userChoice = scanner.nextLine();
            }

            if(userChoice.equals("a")){ //check which action was selected
                freeMonthlyGB = 1000;
                freeMonthlySMS = 1000;
            }
            else if(userChoice.equals("b")){
                freeMonthlyGB = 2000;
                freeMonthlySMS = 500;
            }
            else{
                freeMonthlyGB = 500;
                freeMonthlySMS = 2000;
            }
        }
        else{
            freeMonthlyGB = 0;
            freeMonthlySMS = 0;
        }

        //new Contract Object
        Contract newContract = new Contract(ID, contractType, phonenumber, afm, password, freeminutes, inputDate, contractDuration, monthlyCost, isEContract, paymentMethod, networkSpeed,freeMonthlyGB,freeMonthlySMS);

        it219151.allContracts.add(newContract);

    }
}

package gr.hua.it219151.actions;

import gr.hua.it219151.it219151;
import gr.hua.it219151.contracts.Contract;
import gr.hua.it219151.users.User;

import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.List;
import java.util.Scanner;

public class DeleteContract {

    //the list of all contracts
    public static List<Contract> savedContracts = new ArrayList<>();

    public void removeContract(User loggedUser){ // function to delete or deactivate contract
        System.out.println("Welcome to Remove Contract Page!");

        savedContracts = it219151.allContracts;

        List<Contract> userContracts = new ArrayList<>();
        for(Contract contract: savedContracts){
            if(contract.getAFM().equals(loggedUser.getAFM())){
                userContracts.add(contract);
            }
        }

        if(userContracts.isEmpty()){
            System.out.println("You don't have any contracts!");
        }
        else{
            int counter = 0;
            for(Contract contract: userContracts){
                System.out.println(counter+". Id: " + contract.getContractID() + " Contract Type: " + contract.getType() + " Phone Number " + contract.getPhoneNumber());
                counter++;
            }
            System.out.println("Pick Contract to delete by inserting the corresponding number!");
            Scanner scanner = new Scanner(System.in); //reads user's input
            boolean valid;
            int contractIndex = 1;
            do {
                try {
                    valid = false;
                    contractIndex = scanner.nextInt(); // sc is an object of scanner class
                } catch (InputMismatchException e) {
                    scanner.next();
                    valid = true;
                    System.out.println("Please Input a number!");
                }
            } while (valid);
            contractIndex = contractIndex - 1;
            if(contractIndex >= 0 && contractIndex <= userContracts.size()) {
                Contract contractDelete = userContracts.get(contractIndex);

                System.out.println("Pick 'a' to Delete Contract or 'b' to Deactivate Contract:");
                String userInput = scanner.nextLine();
                while (!userInput.equals("a") && !userInput.equals("b")){ // check for valid user input
                    System.out.println("This is not a valid option, pick again!");
                    userInput = scanner.nextLine();
                }

                if(userInput.equals("a")){
                    it219151.allContracts.remove(contractDelete);
                    System.out.println("Contract deleted!");
                }
                else{
                    contractDelete.setFreeMinutes(0);
                    System.out.println("Contract deactivated!");
                }
            }
            else{
                System.out.println("No such Contract!");
            }
        }

    }
}

package gr.hua.it219151.actions;

import gr.hua.it219151.it219151;
import gr.hua.it219151.contracts.Contract;
import gr.hua.it219151.users.User;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Scanner;

public class GeneralContractInformation {

    public void showInformation(User loggedUser){ // function to show general statistics and active contracts
        System.out.println("Welcome to Contract Information Page!");

        Scanner scanner = new Scanner(System.in); //reads user's input
        String userTypeInput = "";

        while(true) {
            System.out.println("Pick 'a' to show Active Contracts, " +
                    "'b' to Show Total Discount, " +
                    "'c' to Show General User Statistics " +
                    "and 'd' to go back to User Profile Page.");

            userTypeInput = scanner.nextLine();
            while (!userTypeInput.equals("a") && !userTypeInput.equals("b") && !userTypeInput.equals("c") && !userTypeInput.equals("d")){ // check for valid user input
                System.out.println("This is not a valid option, pick again!");
                userTypeInput = scanner.nextLine();
            }
            if(userTypeInput.equals("a")){
                List<Contract> userContracts = new ArrayList<>();
                userContracts = getUserActiveContracts(loggedUser);

                ShowActiveContracts showActiveContract = new ShowActiveContracts();
                showActiveContract.printContracts(loggedUser, userContracts);
            }
            else if(userTypeInput.equals("b")){
                List<Contract> userContracts = new ArrayList<>();
                userContracts = getUserActiveContracts(loggedUser);
                if(!userContracts.isEmpty()) {
                    CalculateTotalDiscountImplementation calculateTotalDiscountImplementation = new CalculateTotalDiscountImplementation();
                    System.out.println("Total Discount " + loggedUser.getDiscount());
                    loggedUser.setDiscount(0);

                    int totaldiscount = 0;
                    totaldiscount += calculateTotalDiscountImplementation.discountByUserType(loggedUser, userContracts);
                    totaldiscount += calculateTotalDiscountImplementation.discountForLandline(userContracts);
                    totaldiscount += calculateTotalDiscountImplementation.discountByPaymentMethod(userContracts);
                    totaldiscount += calculateTotalDiscountImplementation.discountForEContract(userContracts);

                    if (totaldiscount >= 45) {
                        loggedUser.setDiscount(45);
                    } else {
                        loggedUser.setDiscount(totaldiscount);
                    }
                    System.out.println("Total Discount " + totaldiscount);
                }
                else{
                    System.out.println("You don't have any contracts to get Discount!");
                }
            }
            else if(userTypeInput.equals("c")){
                ShowUserStatisticsImplementation showUserStatisticsImplementation = new ShowUserStatisticsImplementation();
                showUserStatisticsImplementation.showStatisticContractType();
                showUserStatisticsImplementation.showStatisticFreeMinutesLandline();
                showUserStatisticsImplementation.showStatisticFreeMinutesMobile();
            }
            else{
                break;
            }

        }

    }

    private List<Contract> getUserActiveContracts(User loggedUser) { // method to get active contracts
        List<Contract> savedContracts = it219151.allContracts;

        List<Contract> userContracts = new ArrayList<>();
        for(Contract contract: savedContracts){ // for every contract
            //contract must belong to logged User and must be active, this means non zero value for free minutes or that it has not expired
            if(contract.getAFM().equals(loggedUser.getAFM()) && contract.getFreeMinutes() != 0 && hasNotExpired(contract.getStartDate(), contract.getContractDuration())){
                userContracts.add(contract);
            }
        }
        return userContracts;
    }

    private Boolean hasNotExpired(String startDate, String duration){ // method to check if contract has expired
        Date today = new Date();
        Date date = new Date();
        try {
            //european date format
            date = new SimpleDateFormat("dd-MM-yyyy").parse((startDate));
            long diff = today.getTime() - date.getTime(); // the difference between contracts start date and now
            diff = diff  / (1000 * 60 * 60 * 24); // the difference in days
            if(duration.equals("ONEYEAR") && diff <= 365){ // check if contract is within duration limits
                return true;
            }
            else if(duration.equals("TWOYEARS") && diff <= 365*2){
                return true;
            }
            else{
                System.out.println("A contract has expired!");
            }

        } catch (ParseException e) {
            e.printStackTrace();
            System.out.println("Unexpected error!");
        }
        return false;
    }

}

package gr.hua.it219151.actions;

import gr.hua.it219151.contracts.Contract;
import gr.hua.it219151.users.User;

import java.util.ArrayList;
import java.util.List;


public class ShowActiveContracts {

    //the list of all contracts
    public static List<Contract> savedContracts = new ArrayList<>();

    public void printContracts(User loggedUser, List<Contract> userContracts){ // function that print contract's information

        if(userContracts.isEmpty()){
            System.out.println("You don't have any contracts!");
        }
        else{
            int counter = 0;
            System.out.println("Your Active Contracts:");
            for(Contract contract: userContracts){ // for every contract use the Contract getters
                System.out.println(counter+". Id: " + contract.getContractID() +
                        " Contract Type: " + contract.getType() +
                        " Phone Number: " + contract.getPhoneNumber() +
                        " AFM: " + contract.getAFM() +
                        " Password: " + contract.getPassword() +
                        " Free Minutes: " + contract.getFreeMinutes() +
                        " Start Date: " + contract.getStartDate() +
                        " Contract Duration: " + contract.getContractDuration() +
                        " Monthly Cost: " + contract.getMonthlyCost() +
                        " Is E-Contract: " + contract.isEContract() +
                        " Payment Method: " + contract.getPaymentType() +
                        " Network Type: " + contract.getNetworkSpeed() +
                        " Free Monthly Data: " + contract.getFreeMonthlyGB() +
                        " Free Monthly SMS: " + contract.getFreeMonthlySMS()
                );
                counter++;
            }
        }
    }
}

package gr.hua.it219151.actions;

//this is an interface that describes a specific functionality using abstract methods that can be implemented
public interface ShowUserStatistics {

    void showStatisticContractType();

    void showStatisticFreeMinutesLandline();

    void showStatisticFreeMinutesMobile();
}

package gr.hua.it219151.actions;

import gr.hua.it219151.it219151;
import gr.hua.it219151.contracts.Contract;

import java.util.ArrayList;
import java.util.List;

// this class implements the interface ShowUserStatistics and we have to implement and override it's abstract methods
public class ShowUserStatisticsImplementation implements ShowUserStatistics{

    //the list of all contracts
    public static List<Contract> savedContracts = new ArrayList<>();

    @Override
    public void showStatisticContractType() { // custom functionality of showStatisticContractType
        savedContracts = it219151.allContracts;

        int landlinecount = 0;
        int mobilecount = 0;

        for(Contract c: savedContracts){
            if(c.getType().equals("LANDLINE")){
                landlinecount ++;
            }
            else{
                mobilecount++;
            }
        }
        int landlineperc = (landlinecount/savedContracts.size()) * 100;
        int mobileperc = (mobilecount/savedContracts.size()) * 100;
        System.out.println("The percentage of Landline Contracts is: " + landlineperc + "% of total Contracts.");
        System.out.println("The percentage of Mobile Contracts is: " + mobileperc + "% of total Contracts.");


    }

    @Override
    public void showStatisticFreeMinutesLandline() { // custom functionality of showStatisticFreeMinutesLandline
        savedContracts = it219151.allContracts;

        int lfreeminutesmin = -1;
        int lfreeminutesmax = 0;
        int lfreeminutesmean = 0;
        int lfreeminutessum = 0;
        int lfreeminutescount = 0;


        for(Contract c: savedContracts){
            if(c.getType().equals("LANDLINE")){
                if(c.getFreeMinutes() > lfreeminutesmax){
                    lfreeminutesmax = c.getFreeMinutes();
                }
                if (c.getFreeMinutes() < lfreeminutesmin || lfreeminutesmin == -1){
                    lfreeminutesmin = c.getFreeMinutes();
                }
                lfreeminutescount += 1;
                lfreeminutessum += c.getFreeMinutes();
            }
        }
        lfreeminutesmean = lfreeminutessum/lfreeminutescount;

        System.out.println("---The Statistics for Landline Contracts---");
        System.out.println("The minimum free minutes for a Landline contract are: " + lfreeminutesmin + " minutes.");
        System.out.println("The maximum free minutes for a Landline contract are: " + lfreeminutesmax + " minutes.");
        System.out.println("The mean value of minutes for Landline contracts is: " + lfreeminutesmean + ".");
        System.out.println("There are " + lfreeminutescount + " active Landline contracts with "
                + lfreeminutessum + " minutes in total.");
    }

    @Override
    public void showStatisticFreeMinutesMobile() { // custom functionality of showStatisticFreeMinutesMobile
        savedContracts = it219151.allContracts;

        int mfreeminutesmin = -1;
        int mfreeminutesmax = 0;
        int mfreeminutesmean = 0;
        int mfreeminutessum = 0;
        int mfreeminutescount = 0;

        for(Contract c: savedContracts) {
            if (c.getType().equals("MOBILE")) {
                if (c.getFreeMinutes() > mfreeminutesmax) {
                    mfreeminutesmax = c.getFreeMinutes();
                }
                if (c.getFreeMinutes() < mfreeminutesmin || mfreeminutesmin == -1) {
                    mfreeminutesmin = c.getFreeMinutes();
                }
                mfreeminutescount += 1;
                mfreeminutessum += c.getFreeMinutes();
            }
        }
        mfreeminutesmean = mfreeminutessum/mfreeminutescount;

        System.out.println("---The Statistics for Mobile Contracts---");
        System.out.println("The minimum free minutes for a Mobile contract are: " + mfreeminutesmin + " minutes.");
        System.out.println("The maximum free minutes for a Mobile contract are: " + mfreeminutesmax + " minutes.");
        System.out.println("The mean value of minutes for Mobile contracts is: " + mfreeminutesmean + ".");
        System.out.println("There are " + mfreeminutescount + " active Mobile contracts with "
                + mfreeminutessum + " minutes in total.");

    }

}

package gr.hua.it219151.actions;

import gr.hua.it219151.contracts.Contract;
import gr.hua.it219151.users.User;

import java.util.List;

//this is an interface that describes a specific functionality using abstract methods that can be implemented
public interface CalculateTotalDiscount {

    int discountByUserType(User loggedUser, List<Contract> userContracts);

    int discountForLandline(List<Contract> userContracts);

    int discountByPaymentMethod(List<Contract> userContracts);

    int discountForEContract(List<Contract> userContracts);

}

package gr.hua.it219151.actions;

import gr.hua.it219151.contracts.Contract;
import gr.hua.it219151.users.User;

import java.util.List;

// this class implements the interface CalculateTotalDiscount and we have to implement and override it's abstract methods
public class CalculateTotalDiscountImplementation implements CalculateTotalDiscount{

    @Override
    public int discountByUserType(User loggedUser, List<Contract> userContracts) { // custom functionality of discountByUserType
        int contractCount = userContracts.size();
        int discount = 0;
        if(loggedUser.getUserType().equals("NORMAL")){
            for(int i = 0; i <= contractCount; i++){
                discount +=5;
            }
            if(discount > 15){
                discount = 15;
            }
        }
        else if(loggedUser.getUserType().equals("PROFESSIONAL")){
            for(int i = 0; i <= contractCount; i++){
                discount +=10;
            }
        }
        else{
            for(int i = 0; i <= contractCount; i++){
                discount +=15;
            }
        }
        return discount;
    }

    @Override
    public int discountForLandline(List<Contract> userContracts) { // custom functionality of discountForLandline
        int discount = 0;
        for(Contract c: userContracts){
            if(c.getType().equals("LANDLINE") && c.getFreeMinutes() >= 1000){
                discount += 11;
            }
        }
        return discount;
    }

    @Override
    public int discountByPaymentMethod(List<Contract> userContracts) { // custom functionality of discountByPaymentMethod
        int discount = 0;
        for(Contract c: userContracts){
            if(c.getPaymentType().equals("CREDIT") || c.getPaymentType().equals("DEBIT")){
                discount += 5;
            }
        }
        return discount;
    }

    @Override
    public int discountForEContract(List<Contract> userContracts) { // custom functionality of discountForEContract
        int discount = 0;
        for(Contract c: userContracts){
            if(c.isEContract()){
                discount += 2;
            }
        }
        return discount;
    }
}
